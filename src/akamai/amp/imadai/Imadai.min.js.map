{"version":3,"sources":["../../../../src/DAI.js","../../../../src/main.js"],"names":["DAI","_akamai$amp$AdPlugin","feature","inProgress","streamManager","currentAd","snapForwardTime","onAdEvent","bind","_this","media","getProperty","name","evaluateBindings","Promise","temporalType","metadata","getSourceByType","config","player","source","akamai","amp","adTagParameters","assetKey","resolve","TIMED_METADATA","event","cue","onTimedMetadata","TXXX","value","data","videoId","contentSourceId","onStreamEvent","removeEventListener","ima","dai","api","StreamEvent","Type","LOADED","google","ERROR","src","logger","log","addEventListener","events","hasOwnProperty","adBreakStart","AD_BREAK_ENDED","adBreakEnd","STARTED","adStarted","COMPLETE","adEnded","AD_PROGRESS","adProgress","CLICK","adClick","FIRST_QUARTILE","adFirstQuartile","MIDPOINT","adMidpoint","THIRD_QUARTILE","adThirdQuartile","CUEPOINTS_CHANGED","cuePointsChanged","Event","AdEvents","BREAK_START","ad","getAd","getAdPodInfo","getAdPosition","companionAds","getCompanionAds","adPosition","adType","adPodIndex","AdVO","getAdId","getDuration","getTotalAds","getTitle","companions","DURATION_CHANGE","this","dispatchEvent","BREAK_END","mediaElement","currentTime","adProgressData","getStreamData","duration","TIME_UPDATE","paused","pause","CLICKED","cuepoints","forEach","cues","startTime","_this2","contentTimeForStreamTime","start","push","error","previousCuePointForStreamTime","played","previousCuePoint","AdPlugin"],"mappings":"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","file":"akamai/amp/imadai/Imadai.min.js","sourcesContent":["//import Timeline from \"./Timeline\"\n\nexport default class DAI extends akamai.amp.AdPlugin {\n  constructor(player, config) {\n    super(player, config)\n\n    this.feature = \"ads\"\n    this.inProgress = false\n    this.streamManager = null\n    this.currentAd = null\n    this.adTimeRemaining = null\n    this.snapForwardTime = null\n\n    this.onAdEvent = this.onAdEvent.bind(this)\n\n    this.player.mediaTransforms.unshift((media) => {\n      return new Promise((resolve, reject) => {\n        // choose the correct request object\n        const isLive = (media.temporalType == \"live\")\n        const streamRequest = (isLive) ? new google.ima.dai.api.LiveStreamRequest() : new google.ima.dai.api.VODStreamRequest()\n\n        // the DAI params can come in from a number of sources\n        const metadata = (media.metadata) ? media.metadata.media || media.metadata : {}\n        const config = this.player.evaluateBindings(this.config, {media})\n        let source = akamai.amp.Utils.getSourceByType(media, \"application/x-mpegURL\")\n        if (source == null)\n          return reject(\"Could not find media\")\n        source = this.player.evaluateBindings(source, {media})\n\n        function getProperty(name, dflt) {\n          return source[name] || metadata[name] || config[name] || dflt\n        }\n\n        // init the stream request\n        streamRequest.adTagParameters = getProperty(\"adTagParameters\")\n        streamRequest.streamActivityMonitorId = getProperty(\"streamActivityMonitorId\")\n        streamRequest.apiKey = getProperty(\"apiKey\", \"\")\n\n        if (isLive) {\n          const assetKey = getProperty(\"assetKey\")\n\n          if (!assetKey)\n            return resolve(media)\n\n          streamRequest.assetKey = assetKey\n          streamRequest.attemptPreroll = getProperty(\"attemptPreroll\", true)\n\n          this.player.addEventListener(akamai.amp.Events.TIMED_METADATA, (event) => {\n            let cue = event.detail\n            if (this.streamManager && cue) {\n              this.streamManager.onTimedMetadata({\"TXXX\": cue.value.data})\n            }\n          })\n        }\n        else {\n          const videoId = getProperty(\"videoId\")\n          const contentSourceId = getProperty(\"contentSourceId\")\n\n          if (!contentSourceId)\n            return resolve(media)\n\n          streamRequest.contentSourceId = contentSourceId\n          streamRequest.videoId = videoId\n        }\n\n        // listen for stream request events\n        let onStreamEvent = (event) => {\n          this.logger.log(`[AMP IMA DAI] Stream Event: ${event.type}`, event)\n          this.streamManager.removeEventListener(\n            [google.ima.dai.api.StreamEvent.Type.LOADED,\n             google.ima.dai.api.StreamEvent.Type.ERROR],\n            onStreamEvent,\n            false)\n\n          switch (event.type) {\n            case google.ima.dai.api.StreamEvent.Type.LOADED:\n              // override the media's src property with the url provided by DAI\n              media.src = event.getStreamData().url\n              //this.player.timeline = new Timeline(this.streamManager, this.player.mediaElement)\n              this.logger.log(`[AMP IMA DAI] Media Source Fetched ${media.src}`)\n              break\n            case google.ima.dai.api.StreamEvent.Type.ERROR:\n              this.logger.log(\"[AMP IMA DAI] Media Source Fetch Error\", event)\n              break\n          }\n          resolve(media)\n        }\n\n        this.streamManager.addEventListener(\n          [google.ima.dai.api.StreamEvent.Type.LOADED,\n           google.ima.dai.api.StreamEvent.Type.ERROR],\n          onStreamEvent,\n          false)\n\n        // make the stream request\n        this.streamManager.requestStream(streamRequest)\n      })\n    })\n  }\n\n  onready() {\n    this.logger.log(\"[AMP IMA DAI] SDK initialize\")\n\n    // create the stream manager\n    this.streamManager = new google.ima.dai.api.StreamManager(this.player.mediaElement)\n    this.streamManager.setClickElement(this.player.ui.ads.container)\n\n    // listen for all available events\n    const events = []\n    for (let event in google.ima.dai.api.StreamEvent.Type) {\n      if (google.ima.dai.api.StreamEvent.Type.hasOwnProperty(event)) {\n        events.push(google.ima.dai.api.StreamEvent.Type[event])\n      }\n    }\n    this.streamManager.addEventListener(events, this.onAdEvent, false)\n  }\n\n  onmediachange() {\n    this.inProgress = false\n  }\n\n  onAdEvent(event) {\n    this.logger.log(`[AMP IMA DAI] Event: ${event.type}`, event)\n    switch (event.type) {\n      case google.ima.dai.api.StreamEvent.Type.AD_BREAK_STARTED:\n        this.adBreakStart(event)\n        break\n      case google.ima.dai.api.StreamEvent.Type.AD_BREAK_ENDED:\n        this.adBreakEnd(event)\n        break\n      case google.ima.dai.api.StreamEvent.Type.STARTED:\n        this.adStarted(event)\n        break\n      case google.ima.dai.api.StreamEvent.Type.COMPLETE:\n        this.adEnded(event)\n        break\n      case google.ima.dai.api.StreamEvent.Type.AD_PROGRESS:\n        this.adProgress(event)\n        break\n      case google.ima.dai.api.StreamEvent.Type.CLICK:\n        this.adClick(event)\n        break\n      case google.ima.dai.api.StreamEvent.Type.FIRST_QUARTILE:\n        this.adFirstQuartile(event)\n        break\n      case google.ima.dai.api.StreamEvent.Type.MIDPOINT:\n        this.adMidpoint(event)\n        break\n      case google.ima.dai.api.StreamEvent.Type.THIRD_QUARTILE:\n        this.adThirdQuartile(event)\n        break\n      case google.ima.dai.api.StreamEvent.Type.CUEPOINTS_CHANGED:\n        this.cuePointsChanged(event)\n        break\n      case google.ima.dai.api.StreamEvent.Type.ERROR:\n        this.adError(event)\n        break\n    }\n  }\n\n  adBreakStart(event) {\n    this.inProgress = true\n    this.dispatchEvent(new akamai.amp.Event(akamai.amp.AdEvents.BREAK_START))\n  }\n\n  adStarted(event) {\n    if (this.inProgress == false)\n      this.adBreakStart()\n\n    const ad = event.getAd()\n    const companionAds = ad.getCompanionAds()\n    const adPosition = ad.getAdPodInfo().getAdPosition()\n    const adPodIndex = ad.getAdPodInfo().getPodIndex()\n    const adType = (adPodIndex == 0) ? \"preroll\" : ((adPodIndex == -1) ? \"postroll\" : \"midroll\")\n\n    this.currentAd = new akamai.amp.AdVO(ad.getAdId(), ad.getTitle(), ad.getDuration(), adPosition, adType, \"ima-dai\", null, companionAds, null, ad, ad.getAdPodInfo().getTotalAds())\n    this.companions = companionAds\n    this.dispatchEvent(new akamai.amp.Event(akamai.amp.AdEvents.LOADED, this.currentAd))\n    this.dispatchEvent(new akamai.amp.Event(akamai.amp.AdEvents.DURATION_CHANGE, this.currentAd))\n    this.dispatchEvent(new akamai.amp.Event(akamai.amp.AdEvents.STARTED, this.currentAd))\n  }\n\n  adFirstQuartile(event) {\n    this.dispatchEvent(new akamai.amp.Event(akamai.amp.AdEvents.FIRST_QUARTILE, this.currentAd))\n  }\n\n  adMidpoint(event) {\n    this.dispatchEvent(new akamai.amp.Event(akamai.amp.AdEvents.MIDPOINT, this.currentAd))\n  }\n\n  adThirdQuartile(event) {\n    this.dispatchEvent(new akamai.amp.Event(akamai.amp.AdEvents.THIRD_QUARTILE, this.currentAd))\n  }\n\n  adEnded(event) {\n    this.dispatchEvent(new akamai.amp.Event(akamai.amp.AdEvents.ENDED, this.currentAd))\n  }\n\n  adBreakEnd(event) {\n    this.inProgress = false\n    this.dispatchEvent(new akamai.amp.Event(akamai.amp.AdEvents.BREAK_END))\n    if (this.snapForwardTime && this.snapForwardTime > this.player.mediaElement.currentTime) {\n      this.player.mediaElement.currentTime = this.snapForwardTime\n      this.snapForwardTime = null\n    }\n  }\n\n  adProgress(event) {\n    const adProgressData = event.getStreamData().adProgressData\n    const currentTime = adProgressData.currentTime\n    const duration = adProgressData.duration\n\n    this.dispatchEvent(new akamai.amp.Event(akamai.amp.AdEvents.TIME_UPDATE, currentTime))\n    this.dispatchEvent(new akamai.amp.Event(akamai.amp.AdEvents.TIME_REMAINING, Math.floor(duration - currentTime)))\n  }\n\n  adClick(event) {\n    if (!this.player.paused)\n      this.player.pause()\n\n    this.dispatchEvent(new akamai.amp.Event(akamai.amp.AdEvents.CLICKED, this.currentAd))\n  }\n\n  adError(event) {\n    this.dispatchEvent(new akamai.amp.Event(akamai.amp.AdEvents.ERROR, event.getStreamData().errorMessage))\n  }\n\n  cuePointsChanged(event) {\n    try {\n      const cues = []\n      event.getStreamData().cuepoints.forEach((cue) => {\n        cues.push({\"startTime\": this.streamManager.contentTimeForStreamTime(cue.start)})\n      })\n      if (cues.length)\n        this.player.cues = cues\n    } catch (error) {}\n  }\n\n  onseeked(event) {\n    const currentTime = this.player.mediaElement.currentTime\n    const previousCuePoint = this.streamManager.previousCuePointForStreamTime(currentTime)\n    if (previousCuePoint && !previousCuePoint.played) {\n      this.snapForwardTime = currentTime\n      this.player.mediaElement.currentTime = previousCuePoint.start\n    }\n  }\n}\n","import DAI from \"./DAI\"\n\nakamai.amp.AMP.registerPlugin(\"imadai\", akamai.amp.Plugin.createFactory(DAI))\n\nexport {DAI}\n"]}