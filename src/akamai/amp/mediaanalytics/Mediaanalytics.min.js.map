{"version":3,"sources":["../../../../src/MediaAnalytics.js","../../../../src/MediaAnalyticsFlash.js","../../../../src/main.js"],"names":["this","MediaAnalytics","__proto__","Object","getPrototypeOf","call","player","config","AKAMAI_MEDIA_ANALYTICS_CONFIG_FILE_PATH","_this2","dimensions","key","val","value","setAkamaiMediaAnalyticsData","evaluateBindings","window","AkamaiAnalytics_debug","mediaElement","akamaiSetVideoObject","error","ads","onadbreakstart","bind","addEventListener","onadloaded","onadstarted","onadbreakend","onadended","onadfirstquartile","media","mediaanalytics","akamia","Utils","akamaiHandleStreamSwitch","event","bitrate","adObject","data","adVO","partner","akamaiHandleAdLoaded","akamai","Plugin","flashPlugins","_this","createFlashVars","createDefaults","createXML","xml","detail","application","element","metrics","vendor","createElement","appendChild","amp","XMLUtils","createTextContent","setAttribute","swf","path","plugin","push","registerPlugin"],"mappings":"8IAU8BA,MAAAC,EAAAC,WAAAC,OAAAC,eAAAH,IAAAI,KAAAL,KAAAM,EAAAC,mDAVTN,YAAAA,EAAAA,2KAGVO,cAAAA,IAAAA,EAAAA,WAA0CD,OAAOA,eAAxDN,GAAA,SAAAQ,GAAAJ,KAAAI,EAAAH,EAAAC,4HAYIG,GAAAA,EAAaC,EACjB,OAAKC,MACOC,GAAVD,4JAaEE,4BAAAH,EAAAX,KAAAM,OAAAS,iBAAAL,EAAAC,uQAeAK,OAAAC,sBAAA,+BAEOA,KAAwBX,OAA/BY,mCAEKC,OAAAA,MAAAA,8BAAP,0BAAAC,qCAOEC,iBACF,aAAArB,KAAAsB,eAAAC,KAAAvB,qEAEEwB,iBAAiB,SAAAxB,KAAcyB,WAAKH,KAAAA,SACpCE,iBAAiB,UAArBxB,KAAiC0B,YAAKC,KAAaJ,SAC/CC,iBAAiB,QAArBxB,KAA+B4B,UAAKH,KAAWF,SAE3CC,iBAAiB,gBAAcI,KAAAA,kBAAnCL,KAAAvB,qEAEIwB,iBAAiB,gBAAiBxB,KAAK6B,kBAAkBN,KAAKvB,sEAOlE,mBAAIU,iMAMgBH,2DAKPuB,OAAMC,IAAAA,MAAAA,SAAnB/B,KAAAO,OAAAG,WAAAH,EAAAG,YAEesB,KAAAA,OAAWC,2DAKtBC,iCACEd,uIAQIU,sPAYKK,6HAMDA,OAAOC,kOAejBC,cACSF,EAAMG,qBACFC,EAAAC,kBACDD,gBADd,mBAAAE,4uBAtIsCC,EAAWC,SAAAA,kNCI9CC,YACC,0DACE,uDAFRtC,OAAAkB,iBAAA,kBAAAqB,EAAAC,gBAAAvB,KAAAsB,MAMKE,OAAAA,iBAAL,YAAAF,EAAAG,UAAAzB,KAAAsB,IACKvC,sVAagBN,KAAAM,OAAAC,OAAAuB,OAAA9B,KAAAM,OAAAC,OAAAuB,MAAAC,kBAED,MAAdrB,iBAEFA,EAAAA,UAAoBC,GAAAD,EAAAC,0EAQlBsC,EAAMd,EAAMe,qBAAlB,WAAA,GACMC,EAAAA,IAEQ,OAAVC,mCAEAC,YAAiBA,uEAKfC,YAAaC,GAEnB,WAAQC,OAAAA,OAAR,iCAESjD,aAAL,MAAJ,wCACgBgD,OAAJE,IAAkBC,SAA5BC,kBAAAV,EAAAjD,KAAAO,OAAAA,uBACQqD,SAEDJ,KAAAA,OAAYJ,OAAnBS,KAAA,4FAEMC,aAAYvD,MAAOwD,6CACXR,OAAJE,IAAkBC,SAA5BC,kBAAAV,EAAAa,kBACQF,wEAKDrD,aAAL,MAA0B,gBACtBG,YAAauC,UAEZO,KAAAA,MAAY9C,OAAAA,2CAEVC,aAAYJ,MAAOG,iBACZ6C,OAAJE,IAAkBC,SAA5BC,kBAAAV,EAAAjD,KAAAO,OAAAG,WAAAC,OACQiD,YAAaR,iFAObjB,EAAAA,eAAOzB,WAAA,GACboB,kBACFA,GAAMC,KAAAA,GAANA,eAA8BA,aAC1BrB,WAAasD,MAAnBrD,IAAAA,EAAAE,MAAAiB,EAAAC,eAAArB,WAAAC,uCAhF2C+B,IAAOe,IAAId,eAAAA,iBAAAA,OAAAA,EAAAA,2ECI5DD,EAAOe,eAAQQ","file":"akamai/amp/mediaanalytics/Mediaanalytics.min.js","sourcesContent":["export default class MediaAnalytics extends akamai.amp.Plugin {\n\n  static create(player, config) {\n    window.AKAMAI_MEDIA_ANALYTICS_CONFIG_FILE_PATH = config.config\n    return akamai.amp.AMP.addResources(config.sdk)\n      .then(() => {\n        return super.create(player, config)\n      })\n  }\n\n  constructor(player, config) {\n    super(player, config)\n  }\n\n  setDimensions(value) {\n    let dimensions = this.config.dimensions\n    for (let key in value) {\n      let val = value[key]\n      if (val != null) {\n        dimensions[key] = val // TODO: Does this need to be evaluated for bindings?\n      }\n    }\n    this.applyDimensions(dimensions)\n    return value\n  }\n\n  applyDimensions(dimensions) {\n    if (typeof window.setAkamaiMediaAnalyticsData != \"function\")\n      return\n\n    try {\n      for (let key in dimensions) {\n        setAkamaiMediaAnalyticsData(key, this.player.evaluateBindings(dimensions[key]))\n      }\n    }\n    catch (error) {\n      this.player.logger.error(\"[AMP MEDIA ANALYTICS ERROR]\", \"Could not set dimensions:\", error)\n    }\n\n    if (this.config.iplookup === false && typeof akamaiDisableServerIpLookup === \"function\") {\n       akamaiDisableServerIpLookup()\n    }\n  }\n\n  onready(event) {\n    try {\n      if (this.debug === true) {\n        window.AkamaiAnalytics_debug = 1\n      }\n      window.akamaiSetVideoObject(this.player.mediaElement)\n    }\n    catch (error) {\n      this.player.logger.error(\"[AMP MEDIA ANALYTICS ERROR]\", \"Could not set video tag\", error)\n    }\n\n    let ads = this.player.ads\n    if (ads == null)\n      return\n\n    ads.addEventListener(\"breakstart\", this.onadbreakstart.bind(this))\n    ads.addEventListener(\"breakend\", this.onadbreakend.bind(this))\n    ads.addEventListener(\"loaded\", this.onadloaded.bind(this))\n    ads.addEventListener(\"started\", this.onadstarted.bind(this))\n    ads.addEventListener(\"ended\", this.onadended.bind(this))\n\n    ads.addEventListener(\"firstquartile\", this.onadfirstquartile.bind(this))\n    ads.addEventListener(\"midpoint\", this.onadmidpoint.bind(this))\n    ads.addEventListener(\"thirdquartile\", this.onadthirdquartile.bind(this))\n  }\n\n  onmediachange(event) {\n    let media = event.detail\n    let dimensions = null\n\n    if (typeof akamaiSetStreamURL === \"function\") {\n      akamaiSetStreamURL(media.src, false)\n    }\n\n    let viewerId = this.config.viewerId || this.config.viewerID || this.config[\"std:viewerId\"]\n    if (viewerId != null && typeof akamaiSetViewerId == \"function\") {\n      akamaiSetViewerId(viewerId)\n    }\n\n    let config = media.mediaanalytics\n    if (config != null && config.dimensions != null) {\n      dimensions = akamia.amp.Utils.override(this.config.dimensions, config.dimensions)\n    } else {\n      dimensions = this.config.dimensions\n    }\n\n    if (typeof akamaiHandleStreamSwitch === \"function\") {\n      try {\n        akamaiHandleStreamSwitch()\n      } catch (error) { }\n    }\n\n    this.applyDimensions(dimensions)\n  }\n\n  updateMedia(media) {\n    if (typeof akamaiHandleTitleSwitch === \"function\") {\n      akamaiHandleTitleSwitch(media)\n    }\n  }\n\n  onfragmentloadstart(event) {\n    if (typeof fragmentDownloadStarted === \"function\") {\n      fragmentDownloadStarted(event.detail)\n    }\n  }\n\n  onfragmentloaded(event) {\n    if (typeof fragmentDownloadCompleted === \"function\") {\n      fragmentDownloadCompleted(event.detail)\n    }\n  }\n\n  onbitratechange(event) {\n    if (typeof akamaiHandleBitRateSwitch === \"function\") {\n      akamaiHandleBitRateSwitch(event.detail.bitrate)\n    }\n  }\n\n  onadbreakstart() {\n    this.player.mediaElement.dataset.isad = true\n  }\n\n  onadbreakend() {\n    this.player.mediaElement.dataset.isad = false\n  }\n\n  onadloaded(event) {\n    try {\n      let adVO = event.data\n      let adObject = {\n        adDuration: adVO.duration,\n        adPartnerId: adVO.partner,\n        adTitle: adVO.title,\n        adId: adVO.id\n      }\n\n      if (typeof akamaiHandleAdLoaded === \"function\") {\n        akamaiHandleAdLoaded(adObject)\n      }\n    }\n    catch (error) {\n      this.player.logger.error(\"[AMP MEDIA ANALYTICS ERROR]\", error)\n    }\n  }\n\n  onadstarted() {\n    if (typeof akamaiHandleAdStarted === \"function\") {\n      akamaiHandleAdStarted()\n    }\n  }\n\n  onadfirstquartile() {\n    if (typeof akamaiHandleAdFirstQuartile === \"function\") {\n      akamaiHandleAdFirstQuartile()\n    }\n  }\n\n  onadmidpoint() {\n    if (typeof akamaiHandleAdMidpoint === \"function\") {\n      akamaiHandleAdMidpoint()\n    }\n  }\n\n  onadthirdquartile() {\n    if (typeof akamaiHandleAdThirdQuartile === \"function\") {\n      akamaiHandleAdThirdQuartile()\n    }\n  }\n\n  onadended() {\n    if (typeof akamaiHandleAdCompleted === \"function\") {\n      akamaiHandleAdCompleted()\n    }\n    // TODO: Why is this here?\n    this.player.getMediaElement().dataset.isad = true\n  }\n}\n","export default class MediaAnalyticsFlash extends akamai.amp.Plugin {\n\n  constructor(player, config) {\n    super(player, config)\n    this.flashPlugins = [{\n      id: \"OSMFCSMALoader\",\n      host: \"osmf\",\n      main: \"com.akamai.playeranalytics.osmf.OSMFCSMALoaderInfo\",\n      type: \"application/x-shockwave-flash\"\n    }]\n    this.createDefaults()\n    this.player.addEventListener(\"createflashvars\", this.createFlashVars.bind(this))\n    this.player.addEventListener(\"createxml\", this.createXML.bind(this))\n  }\n\n  createDefaults() {\n    this.player.createDefaults.call(this)\n  }\n\n  setDimensions(value) {\n    this.player.mediaElement.setPlayerProperty(\"maDimensions\", value)\n    return value\n  }\n\n  createFlashVars(event) {\n    const flashvars = event.detail.flashvars\n    const dimensions =  this.player.config && this.player.config.media && this.player.config.media.mediaanalytics\n\n    if (dimensions != null) {\n      for (let key in dimensions) {\n        flashvars[\"report_\" + key] = dimensions[key]\n      }\n    }\n  }\n\n  createXML(event) {\n    const xml = event.detail.xml\n    const application = xml.firstChild\n    let metrics = xml.getElementsByTagName(\"metrics\")[0]\n    let element = null\n\n    if (metrics == null) {\n      metrics = xml.createElement(\"metrics\")\n      application.appendChild(metrics)\n    }\n\n    const vendor = xml.createElement(\"vendor\")\n    vendor.setAttribute(\"id\", \"akamai\")\n    metrics.appendChild(vendor)\n\n    if (this.config.config != null) {\n      element = xml.createElement(\"property\")\n      element.setAttribute(\"key\", \"MEDIA_ANALYTICS_BEACON\")\n      element.appendChild(akamai.amp.XMLUtils.createTextContent(xml, this.config.config))\n      vendor.appendChild(element)\n\n      const path = this.config.plugin.swf || \"http://79423.analytics.edgesuite.net/csma/plugin/csma.swf\"\n      element = xml.createElement(\"property\")\n      element.setAttribute(\"key\", \"MEDIA_ANALYTICS_PLUGIN_PATH\")\n      element.appendChild(akamai.amp.XMLUtils.createTextContent(xml, path))\n      vendor.appendChild(element)\n    }\n\n    if (this.config.dimensions != null) {\n      const dimensions = xml.createElement(\"property\")\n      dimensions.setAttribute(\"key\", \"dimensions\")\n      vendor.appendChild(dimensions)\n\n      for (let key in this.config.dimensions) {\n        element = xml.createElement(\"property\")\n        element.setAttribute(\"key\", key)\n        element.appendChild(akamai.amp.XMLUtils.createTextContent(xml, this.config.dimensions[key]))\n        dimensions.appendChild(element)\n      }\n    }\n  }\n\n  onmediachange(event) {\n    const media = event.detail\n    if (media.mediaanalytics && media.mediaanalytics.dimensions) {\n      media.dimensions = []\n      for (let key in media.mediaanalytics.dimensions) {\n        media.dimensions.push({key: key, value: media.mediaanalytics.dimensions[key]})\n      }\n    }\n  }\n}\n","import MediaAnalytics from \"./MediaAnalytics.js\"\nimport MediaAnalyticsFlash from \"./MediaAnalyticsFlash.js\"\n\nakamai.amp.AMP.registerPlugin(\"mediaanalytics\", \"html\", MediaAnalytics.factory)\nakamai.amp.AMP.registerPlugin(\"mediaanalytics\", \"flash\", MediaAnalyticsFlash.factory)\n\nexport {MediaAnalytics}\n"]}