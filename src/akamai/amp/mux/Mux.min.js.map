{"version":3,"sources":["../../../../src/Mux.js","../../../../src/main.js"],"names":["Mux","player","mux","config","Object","version","initTime","container","element","event","mapEvents","target","map","isAdEvent","muxEvent","playerEvent","getInProgress","ads","log","emit","test","addEventListener","media","detail","guid","title","duration","temporalType","poster","type","getEnabled","init","this","mediaElement","isNaN","undefined","Math","round","language","paused","getPlayheadTime","displayState","clientWidth","clientHeight","akamai","amp"],"mappings":"6DACqBA,aAAAA,eAAAA,KAAAA,oCAEZC,IAALC,OACKC,KAALC,OAAcD,6BACd,8BAC0BF,EAAAI,+BACF,oCACGJ,4BACDK,qBAGvBH,GANSF,EAAZM,YAQMC,iBAAiBD,QAAvB,SAAAE,WAGEC,GAAAC,EAAAC,EAAAC,oBAESH,iBAAkBE,EAAKC,GAAW,SAAAL,EAAAM,EAAAC,IAChCD,GAAYF,EAAKI,kBAEjBH,aAAaI,KAAID,IAAAA,QACpBE,IAAA,WAAAJ,KAEEK,KAACX,EAAaY,gEATnBC,GACCJ,cAAM,kBAAgD,6BAgBlDhB,gBACA,mBACG,qBACF,8DAIA,cAPXoB,iBAAA,cAAA,SAAAZ,0BAYOY,IAAAA,WAAiB,iBAClBC,KAAAA,EAAcC,wBACND,EAAAE,iBACHhB,EAASiB,qBACAD,EADeE,uBAAA,QAElBJ,EAAMG,8BACHH,EAAMI,wBACNJ,EAAMK,2BACEC,EALOC,SAHnCZ,EAAAa,oBAcIb,UAAIa,qBACS,wBACA,uDAGH,wBACG,2BACF,2BACQ,8DAGR,eAVbb,yDA5CJc,KAAAvB,EAAAwB,8GAuEI/B,EAAcA,EAAlBgC,wCAEmBhC,EAAOgC,+BACnBC,MAAAD,EAAAP,cAAAS,GAAAC,KAAAC,MAAA,IAAAJ,EAAAP,8BACgBzB,EAAOqC,iCACCL,8BACRA,4BACDA,KAAAA,uCAJf,cAKahC,EAAOsC,kCACEC,6BACGC,6BACVxC,kCACDgC,kCACGS,EAAAA,2BACPlC,EAAQmC,0BACD1C,EAAAA,wLAUZA,EAAQE,+DC9GxByC,EAAOC,IAAP7C","file":"akamai/amp/mux/Mux.min.js","sourcesContent":["\nexport default class Mux {\n  constructor(player, config, mux) {\n    this.player = player\n    this.config = config\n    this.sdk = mux\n    this.data = Object.assign({\n      player_software_name: \"AMP\",\n      player_software_version: player.version,\n      player_mux_plugin_name: \"amp-mux\",\n      player_mux_plugin_version: \"1.66.0\",\n      player_init_time: player.initTime,\n    }, config.data)\n    \n    const element = player.container\n    \n    player.addEventListener(\"ready\", function (event) {\n      const ads = player.ads || {getEnabled: function () { return false; }, getInProgress: function () { return false; }}\n      \n      function mapEvents(target, map, isAdEvent) {\n        for (var muxEvent in map) {\n          target.addEventListener(map[muxEvent], function (element, muxEvent, playerEvent) {\n            if (!isAdEvent && ads.getInProgress())\n              return\n              \n            if (!/timeupdate/.test(muxEvent)) \n              console.log(\"mux.emit\", muxEvent); // TODO: Replace with player.logger.log\n              \n            mux.emit(element, muxEvent)\n          }.bind(null, element, muxEvent))\n        }\n      }\n      \n      mapEvents(player, {\n        \"play\": \"play\",\n        \"playing\": \"playing\",\n        \"pause\": \"pause\",\n        \"timeupdate\": \"timeupdate\",\n        \"seeking\": \"seeking\",\n        \"seeked\": \"seeked\",\n        \"error\": \"error\",\n        \"ended\": \"ended\",\n        \"stalled\": \"stalled\"\n      })\n      \n      player.addEventListener(\"mediachange\", function (event) {\n        var media = event.detail;\n        console.log(\"mux.emit\", \"videochange\");\n        mux.emit(element, \"videochange\", {\n          video_id: media.guid,\n          video_title: media.title,\n          video_duration: media.duration,\n          video_is_live: (media.temporalType == \"live\"),\n          video_poster_url: media.poster,\n          video_source_url: media.src,\n          video_source_mime_type: media.type\n        })\n      })\n      \n      if (ads.getEnabled()) {\n        mapEvents(ads, {\n          \"adrequest\": \"request\",\n          \"adresponse\": \"response\",\n          \"adbreakstart\": \"breakstart\",\n          \"adplay\": \"play\",\n          \"adplaying\": \"playing\",\n          \"adpause\": \"pause\",\n          \"adfirstquartile\": \"firstquartile\",\n          \"admidpoint\": \"midpoint\",\n          \"adthirdquartile\": \"thirdquartile\",\n          \"adended\": \"ended\",\n          \"adbreakend\": \"breakend\",\n          \"aderror\": \"error\"\n        }, true)\n        \n        mapEvents(ads, {\n          \"adplay\": \"breakstart\"\n        }, true)\n      }\n      \n      mux.emit(element, \"playerready\")\n    })\n    \n    mux.init(element, this)\n  }\n\n  getStateData() {\n    var player = this.player\n    var error = player.error || {}\n    var mediaElement = player.mediaElement\n    return {\n      video_language_code: player.language,\n      video_source_duration: isNaN(mediaElement.duration) ? undefined : Math.round(mediaElement.duration * 1000),\n      video_source_height: mediaElement.videoHeight,\n      video_source_width: mediaElement.videoWidth,\n      player_is_paused: player.paused,\n      player_playhead_time: this.getPlayheadTime(),\n      player_is_fullscreen: (player.displayState == \"fullscreen\"),\n      player_autoplay_on: player.autoplay,\n      player_preload_on: mediaElement.preload,\n      player_width: element.clientWidth,\n      player_height: element.clientHeight,\n      player_language_code: player.language,\n      player_error_code: error.code,\n      player_error_message: error.message\n    }\n  }\n  \n  getPlayheadTime() {\n    return Math.round(this.player.getCurrentTime() * 1000)\n  }\n  \n  static create(player, config) {\n    return new Promise((resolve, reject) => {\n      resolve(new Mux(player, config, mux))\n    })\n  }\n}\n","import Mux from \"./Mux.js\"\n\nakamai.amp.AMP.registerPlugin(\"mux\", Mux.create)\n\nexport {Mux}"]}